#include "msp430g2553.h"
/*
 * main.c
 */


/*
 * Progress:
 *              Done -> Read data from Pulse-Sensor
 *                   -> Transfer data via Bluetooth
 *                   -> Software Update
 *                   ->
 */

// Start date: unknown
// Re-processing date June 12th 2017
// Finish date: unknown

unsigned int PreADC10MEM = 0;                         // For comparing previous value of ADC10MEM
unsigned int Data = 0;                                // Data use for sending

int i, j, w = 0;
unsigned char data[3], c[5];
unsigned char cmd = 0;                                // cmd = command, receiving cmd via bluetooth

void main(void)
{

    WDTCTL = WDTPW | WDTHOLD;   // Stop watchdog timer (Watchdog timer password | Watchdog timer hold counter)

    ADC10CTL0 = ADC10SHT_2 + ADC10ON + ADC10IE;
    ADC10CTL1 = INCH_0;
    ADC10AE0 |= 0X00;                                       // ADC reading for port 1.0
//    P1DIR |= BIT6;                                          // Port 1.6 as output
    P1DIR |= BIT3;                                            // Port 1.3 as output
//    P1REN |= 8;                                             // Port 1.3 - button left as input
//    P1REN |= 4;                                             // Port 1.2 as input

    serialInit();


    //////////////// Read Data from Pulse-Sensor ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    while(1)
    {
        ADC10CTL0 |= ENC + ADC10SC;
//        _delay_ms(300);
        __bis_SR_register(CPUOFF + GIE);
//        _delay_ms(300);
        ADC10CTL0 &= ~ENC;                                  // Disable Conversion
//        _delay_ms(300);
        Data = (ADC10MEM + PreADC10MEM)/2;
//        _delay_ms(300);
//        if(P1OUT == 0x01)
//            P1OUT &= ~0x01;                                 // If Previous Value of ADC10MEM (PreADC10MEM) different from present ADC10MEM => turn LED1 OFF
//        else
//            P1OUT |= 0x01;
        PreADC10MEM = ADC10MEM;

        cmd = read();

        switch(cmd) {
                    case 0:   serialwriteString("Your Heart Rate: ");
//                                serial_write_int(Data);
                                break;
                    default:    serialwriteString("Nothing");
                                break;
                    }

    }
    ///////// End of Read Data from Pulse-Sensor /////////////////////////////////////////////////////////////////////////////////////////////////////

//    cmd=serialRead();
    cmd=read();

//    if(cmd == '0')
//        {
//            serialwriteString("Your Heart Rate: ");
//            serial_write_int(Data);
//        }
//
//    if(P1OUT == '0')
//        {
//            serialwriteString("Your Heart Rate: ");
//            serial_write_int(Data);
//        }
}


#pragma vector=ADC10_VECTOR
__interrupt void ADC10_IRS(void)
{
    __bic_SR_register_on_exit(CPUOFF);
}


void serialInit()
{
//    P1SEL= BIT1 + BIT2; //P1.1 = RXD P1.2=TXD
//    P1SEL2= BIT1 +BIT2; // P1.1=RXD & P1.2=TXD

    UCA0CTL1|= UCSSEL_2; // SMCLK
    UCA0BR0=104; // BAUDRATE AT 1 MHz 9600
    UCA0BR1=0;//1MHz 9600
    UCA0MCTL= UCBRS0; // MODULATION UCBRSx=1
    UCA0CTL1&=~UCSWRST; // ** INITIALIZE USCI STATE MACHINE
    IE2|= UCA0RXIE; // ENABLE VSCI_A0 RX INTERRUPT
}

//unsigned char read()
void read()
{
//    while(!(IFG2&UCA0RXIFG));   //USCI_A0 RX buffer ready ?
//    return UCA0RXBUF;
                    UCA0RXBUF = UCA0RXBUF >> 1;           // otherwise just shift.
                        TACCTL1 = 0;        // turn off timer interrupts
                        cmd = (UCA0RXBUF >> 1) & 0xff;   // extract received byte
                        P1IFG = 0;          // clear P1 interrupt flags
}
void send(unsigned char c)
{
    while(!(IFG2&UCA0TXIFG));  // USCI_A0 TX buffer ready ?
    UCA0TXBUF=c; // TX
}
void serialwriteString(const char *str)
{
    while(*str)
        send(*str++);
}


void send_init(unsigned int temp)
{
    for( i=0;i<3;i++)
    {
        data[i]=temp%10;
        //send(data[i]);
        temp=temp/10;
    }

    for(j=3;j>=0;j--)
    {
        send(data[j] + 48);
    }

    send(' ');
    send('\n');
}


serial_write_float(float v)
{
    w = v*100;

    for(i=0;i<4;i++)
    {
        c[i]=w%10;
        w=w/10;
    }

    send(c[3]+48);
    send(c[2] +48);
    send('.');
    send(c[1] + 48);
    send(c[0] + 48);
    send(' ');
    send('\n');
}

//
//void _delay_ms(int n)
//{
//  int i;
//  // assumes 2 instructions for loop - could be false
//  for (i=0; i;    _delay_us(1000)); // 1 ms
//}
